--- : O

published VBN O
: : O
true JJ O

author NN O
: : O
swaterman NN O

layout NN O
: : O
default_post NN O

title NN O
: : O
" '' O
Optimise NNP B-KEYWORD
your PRP$ O
Micro:Bit NNP B-KEYWORD
code NN O
with IN O
Chrome NNP B-KEYWORD
DevTools NNP I-KEYWORD
" '' O

summary NN O
: : O
" '' O
Some DT O
might MD O
say VB O
I PRP O
pushed VBD O
the DT O
Micro:Bit NNP B-KEYWORD
too RB O
far RB O
. . O

This DT O
post NN O
is VBZ O
not RB O
for IN O
those DT O
people NNS O
. . O

If IN O
your PRP$ O
Micro:Bit NNP B-KEYWORD
is VBZ O
also RB O
struggling VBG O
, , O
this DT O
post NN O
will MD O
show VB O
you PRP O
how WRB O
to TO O
optimise VB B-KEYWORD
your PRP$ O
code NN O
and CC O
push NN O
it PRP O
further JJ O
" '' O

summary-short NN O
: : O
" '' O
How WRB O
can MD O
we PRP O
use VB O
Chrome's NNP B-KEYWORD
built-in JJ O
JavaScript NNP B-KEYWORD
profiler NN I-KEYWORD
to TO O
optimise VB O
our PRP$ O
Micro:Bit NNP B-KEYWORD
JavaScript NNP I-KEYWORD
?" NN O

categories NNS O
: : O

- : O
Tech NNP O

tags NNS O
: : O

- : O
optimisation NN B-KEYWORD

- : O
javascript NN B-KEYWORD

- : O
micro:bit NN B-KEYWORD

image NN O
: : O
swaterman/assets/microbit-optimisation/testbench.png NN O

--- : O


When WRB O
I PRP O
[wrote VBD O
a DT O
ray NNP O
tracer](https://blog.scottlogic.com/2020/03/10/raytracer-how-to.html NN O
) ) O
for IN O
the DT O
[BBC NNP O
Micro:Bit](https://microbit.org/ NNP O
), NN O
I PRP O
didn't VBD O
expect VB O
it PRP O
to TO O
be VB O
fast RB O
. . O

I PRP O
was VBD O
right NN O
- - O
my PRP$ O
first JJ O
attempt NN O
was VBD O
unbearably RB O
slow JJ O
, , O
taking VBG O
multiple JJ O
seconds NNS O
to TO O
respond VB O
to TO O
a DT O
button NN O
press NN O
. . O

That DT O
meant NN O
I PRP O
had VBD O
to TO O
optimise VB B-KEYWORD
my PRP$ O
code NN O
, , O
but CC O
the DT O
normal JJ O
[MakeCode NN O
IDE](https://makecode.microbit.org/ NNP O
) ) O
doesn't NN O
provide VB O
any DT O
tools NNS O
to TO O
let VB O
you PRP O
inspect VB O
your PRP$ O
program NN O
while IN O
it's NN O
running VBG O
. . O

Instead RB O
, , O
I PRP O
reworked VBD O
my PRP$ O
code NN O
to TO O
[run VB O
as IN O
a DT O
website](http://microbit-raytracer.stevenwaterman.uk JJ O
) ) O
and CC O
used VBN O
Chrome's NNP B-KEYWORD
Developer NNP I-KEYWORD
Tools NNP I-KEYWORD
. . O

My PRP$ O
test NN O
bench NN O
code NN O
is VBZ O
available JJ O
[on NN O
GitHub](https://github.com/stevenwaterman/microbit-raytracer/tree/gh-pages NNP O
). NN O


This DT O
post NN O
walks VBZ O
you PRP O
through IN O
how WRB O
to TO O
build VB O
a DT O
test NN O
bench NN O
website NN O
for IN O
your PRP$ O
code NN O
and CC O
use VB O
the DT O
Chrome NNP B-KEYWORD
Developer NNP I-KEYWORD
Tools NNP I-KEYWORD
to TO O
optimise VB O
it PRP O
. . O

It PRP O
is VBZ O
aimed VBN O
at IN O
more JJR O
advanced JJ O
Micro:Bit NNP B-KEYWORD
users NNS O
, , O
but CC O
you PRP O
don't VBP O
need VB O
any DT O
experience NN O
with IN O
HTML NNP O
or CC O
web NN O
development NN O
in IN O
general JJ O
. . O

However RB O
, , O
you PRP O
will MD O
need VB O
a DT O
basic JJ O
grasp NN O
of IN O
using VBG O
the DT O
command NN O
line NN O
to TO O
navigate VB O
between IN O
folders NNS O
and CC O
run VB O
commands NNS O
. . O


## NN O
Introduction NNP O
to TO O
Profiling NNP B-KEYWORD


When WRB O
it PRP O
comes VBZ O
to TO O
optimising VBG B-KEYWORD
your PRP$ O
code NN O
, , O
there EX O
are VBP O
a DT O
lot NN O
of IN O
general JJ O
tips NNS O
I PRP O
could MD O
give VB O
you PRP O
. . O

However RB O
, , O
I PRP O
can't MD O
give VB O
advice NN O
about IN O
your PRP$ O
specific JJ O
project NN O
. . O

Thankfully NNP O
, , O
you PRP O
can MD O
use VB O
a DT O
tool NN O
called VBD O
a DT O
[profiler](https://en.wikipedia.org/wiki/Profiling_(computer_programming VBG O
)) NN O
for IN O
that DT O
. . O


Profilers NNS B-KEYWORD
inspect VBP O
your PRP$ O
program NN O
during IN O
execution NN O
and CC O
generate VB O
a DT O
report NN O
. . O

The DT O
report NN O
lists NNS O
how WRB O
often RB O
each DT O
function NN O
ran VBD O
and CC O
how WRB O
long JJ O
they PRP O
took VBD O
. . O

It PRP O
also RB O
tells VBZ O
you PRP O
how WRB O
much JJ O
memory NN O
was VBD O
used VBN O
, , O
and CC O
where WRB O
in IN O
your PRP$ O
code NN O
the DT O
memory NN O
was VBD O
allocated VBN O
. . O

This DT O
helps VBZ O
you PRP O
find VBP O
the DT O
' POS O
hot JJ O
spots NNS O
' POS O
in IN O
your PRP$ O
code NN O
- : O
the DT O
parts NNS O
that WDT O
are VBP O
running VBG O
frequently RB O
and CC O
taking VBG O
a DT O
long JJ O
time NN O
. . O


! . O
[An JJ O
image NN O
of IN O
some DT O
code NN O
with IN O
cartoon NN O
fire NN O
superimposed]({{ NN O
site.github.url NN O
}}/swaterman/assets/microbit-optimisation/hotspots.png NN O
" '' O
If IN O
your PRP$ O
code NN O
is VBZ O
this DT O
hot JJ O
, , O
you PRP O
need VBP O
more JJR O
help NN O
than IN O
I PRP O
can MD O
give VB O
") NN O



In IN O
general JJ O
, , O
a DT O
profiler NN B-KEYWORD
lets VBZ O
you PRP O
know VBP O
which WDT O
bits NNS O
of IN O
your PRP$ O
code NN O
are VBP O
causing VBG O
slowness JJ O
and CC O
need NN O
optimising VBG B-KEYWORD
. . O

Since IN O
optimisation NN B-KEYWORD
usually RB O
makes VBZ O
your PRP$ O
code NN O
harder RBR O
to TO O
read VB O
and CC O
maintain VB O
, , O
this DT O
information NN O
comes VBZ O
in IN O
handy JJ O
. . O

We PRP O
only RB O
want VBP O
to TO O
optimise VB B-KEYWORD
the DT O
parts NNS O
of IN O
the DT O
code NN O
that IN O
need VBP O
it PRP O
most JJS O
. . O


The DT O
MakeCode NNP O
IDE NNP O
doesn't NN O
include VBP O
a DT O
profiler NN B-KEYWORD
, , O
but CC O
we PRP O
can MD O
rework VB O
our PRP$ O
code NN O
to TO O
let VB O
us PRP O
use VB O
a DT O
normal JJ O
JavaScript NNP O
profiler NN O
. . O

Google NNP B-KEYWORD
Chrome NNP I-KEYWORD
has VBZ O
a DT O
JavaScript NNP O
profiler NN O
built-in JJ O
, , O
and CC O
you PRP O
can MD O
run VB O
it PRP O
on IN O
any DT O
website NN O
using VBG O
the DT O
[Chrome NNP O
Developer NNP O
Tools](https://developers.google.com/web/tools/chrome-devtools NNP O
). NN O

In IN O
fact NN O
, , O
Chrome NNP B-KEYWORD
is VBZ O
not RB O
unique JJ O
here RB O
- - O
most JJS O
browsers NNS O
include VBP O
profilers NNS B-KEYWORD
in IN O
their PRP$ O
developer NN O
tools NNS O
. . O

In IN O
this DT O
post NN O
, , O
I'll NNP O
focus NN O
on IN O
Chrome's NNP B-KEYWORD
profiler NN I-KEYWORD
, , O
so RB O
make VB O
sure JJ O
you PRP O
are VBP O
using VBG O
Chrome NNP B-KEYWORD
too RB O
if IN O
you PRP O
are VBP O
following VBG O
along RB O
at IN O
home NN O
. . O


## NN O
Building NNP O
a DT O
Test NNP O
Bench NNP O


Since IN O
Chrome's NNP B-KEYWORD
profiler NN I-KEYWORD
only RB O
works VBZ O
on IN O
websites NNS O
, , O
we PRP O
can't MD O
use VB O
it PRP O
to TO O
profile VB B-KEYWORD
your PRP$ O
Micro:Bit NNP B-KEYWORD
project NN O
directly RB O
. . O

Instead RB O
, , O
we PRP O
need VBP O
to TO O
build VB O
a DT O
website NN O
that WDT O
runs VBZ O
your PRP$ O
code NN O
- - O
known VBN O
as IN O
a DT O
[test NN O
bench](https://en.wikipedia.org/wiki/Test_bench NN O
). NN O

That DT O
could MD O
be VB O
as RB O
simple JJ O
as IN O
: : O


~~~html NN O

<html> NN O

<head> NN O

<script NN O
src= NN O
". NN O
/myCode.js"></script> NN O

</head> NN O

</html> NN O

~~~ NN O


However RB O
, , O
this DT O
only RB O
works VBZ O
if IN O
your PRP$ O
program NN O
is VBZ O
pure JJ O
JavaScript NNP B-KEYWORD
. . O

Most JJS O
Micro:Bit NNP B-KEYWORD
code NN O
uses VBZ O
the DT O
handy JJ O
built-in JJ O
functions NNS O
, , O
like IN O
`input.onButtonPressed` NN O
or CC O
`basic.clearScreen` NN O
. . O

We PRP O
will MD O
need VB O
to TO O
write VB O
some DT O
extra JJ O
code NN O
to TO O
let VB O
us PRP O
use VB O
those DT O
functions NNS O
, , O
known VBN O
as IN O
[stubbing](https://en.wikipedia.org/wiki/Method_stub NN O
) ) O
them PRP O
. . O


Stubbing VBG O
a DT O
function NN O
means VBZ O
writing VBG O
a DT O
simpler JJR O
version NN O
of IN O
it PRP O
, , O
which WDT O
can MD O
be VB O
used VBN O
in IN O
place NN O
of IN O
the DT O
real JJ O
version NN O
. . O

For IN O
example NN O
, , O
you PRP O
could MD O
stub VB O
`radio.sendString` NN O
with IN O
a DT O
function NN O
that IN O
just RB O
writes VBZ O
the DT O
value NN O
in IN O
a DT O
text NN O
box NN O
. . O

You PRP O
could MD O
stub VB O
`input.onButtonPressed` NN O
like IN O
this DT O
: : O


~~~ts NN O

const NN O
Button NNP O
= SYM O
{ ( O

A DT O
: : O
" '' O
a DT O
", NN O

B NNP O
: : O
" '' O
b SYM O
", NN O

AB NNP O
: : O
" '' O
ab NNP O
" '' O

} ) O
; : O


let VB O
aPressed JJ O
= SYM O
() NN O
=> NN O
{} NN O
; : O

let VB O
bPressed JJ O
= SYM O
() NN O
=> NN O
{} NN O
; : O

let VB O
abPressed JJ O
= SYM O
() NN O
=> NN O
{} NN O
; : O


const NN O
input NN O
= SYM O
{ ( O

onButtonPressed JJ O
: : O
( ( O
button NN O
: : O
string NN O
, , O
func NN O
: : O
() NN O
=> NN O
void NN O
) ) O
=> NN O
{ ( O

if IN O
( ( O
button NN O
=== NNP O
Button.A NNP O
) ) O
aPressed VBD O
= SYM O
func NN O
; : O

if IN O
( ( O
button NN O
=== NNP O
Button.B NNP O
) ) O
bPressed VBD O
= SYM O
func NN O
; : O

if IN O
( ( O
button NN O
=== NNP O
Button.AB NNP O
) ) O
abPressed VBD O
= SYM O
func NN O
; : O

} ) O

} ) O

~~~ NN O


Now RB O
, , O
other JJ O
parts NNS O
of IN O
your PRP$ O
code NN O
can MD O
call VB O
`input.onButtonPressed` RBR O
just RB O
like IN O
on IN O
a DT O
real JJ O
Micro:Bit NNP B-KEYWORD
. . O

The DT O
final JJ O
step NN O
is VBZ O
to TO O
add VB O
some DT O
HTML NNP O
buttons NNS O
to TO O
your PRP$ O
test NN O
bench NN O
. . O

When WRB O
the DT O
`A` NN O
button NN O
is VBZ O
pressed VBN O
, , O
it PRP O
should MD O
run VB O
the DT O
`aPressed` NN O
function NN O
from IN O
the DT O
stub NN O
. . O


~~~html NN O

<html> NN O

<head> NN O

<script NN O
src= NN O
". NN O
/myCode.js"></script> NN O

</head> NN O


<body> NN O

<button NN O
onClick="aPressed()">A</button> NN O

<button NN O
onClick="bPressed()">B</button> NN O

<button NN O
onClick="abPressed()">AB</button> NN O

</body> NN O

</html> NN O

~~~ NN O


If IN O
you PRP O
need VBP O
a DT O
second JJ O
example NN O
, , O
you PRP O
can MD O
look VB O
at IN O
my PRP$ O
ray NNP O
tracer's NNS O
[test NN O
bench](https://github.com/stevenwaterman/microbit-raytracer/tree/gh-pages JJ O
). NN O

There RB O
, , O
I PRP O
stubbed VBD O
the DT O
LED NNP O
screen NN O
using VBG O
[HTML NN O
canvas](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API JJ O
). NN O

The DT O
resulting VBG O
website NN O
looks VBZ O
like IN O
this DT O
: : O


! . O
[My JJ O
test NN O
bench NN O
shows VBZ O
a DT O
red JJ O
pyramid NN O
on IN O
the DT O
display NN O
, , O
and CC O
has VBZ O
one CD O
button NN O
for IN O
each DT O
input NN O
you PRP O
can MD O
give VB O
the DT O
micro:bit NN B-KEYWORD
, , O
including VBG O
the DT O
two CD O
buttons NNS O
and CC O
the DT O
tilt NN O
gestures]({{ NN O
site.github.url NN O
}}/swaterman/assets/microbit-optimisation/testbench.png JJ O
" '' O
It's NN O
no DT O
pixar NN O
, , O
but CC O
it's JJ O
mine NN O
") NN O


Stubbing NNP O
the DT O
Micro:Bit NNP B-KEYWORD
methods NNS O
can MD O
be VB O
really RB O
hard JJ O
at IN O
first JJ O
, , O
and CC O
it's NN O
often RB O
unclear JJ O
what WP O
approach NN O
to TO O
take VB O
. . O

Therefore RB O
, , O
before IN O
you PRP O
jump NN O
in IN O
and CC O
start VB O
stubbing VBG O
the DT O
methods NNS O
, , O
you PRP O
should MD O
think VB O
about IN O
whether IN O
you PRP O
really RB O
need VBP O
them PRP O
. . O

If IN O
your PRP$ O
only RB O
goal NN O
is VBZ O
to TO O
test VB O
the DT O
performance NN O
of IN O
your PRP$ O
program NN O
, , O
do VBP O
you PRP O
really RB O
need VBP O
to TO O
see VB O
the DT O
output NN O
of IN O
the DT O
LED NNP O
display NN O
? . O

If IN O
not RB O
, , O
you PRP O
can MD O
just RB O
comment VB O
out RP O
any DT O
lines NNS O
that WDT O
use VBP O
the DT O
Micro:Bit NNP B-KEYWORD
functions NNS O
. . O


It's NNP O
also RB O
important JJ O
to TO O
remember VB O
that IN O
your PRP$ O
computer NN O
is VBZ O
much RB O
faster RBR O
than IN O
the DT O
Micro:Bit NNP O
. . O

That DT O
means VBZ O
that IN O
your PRP$ O
code NN O
could MD O
run VB O
so RB O
quickly RB O
that IN O
it PRP O
finishes VBZ O
before IN O
the DT O
profiler NN O
records NNS O
any DT O
data NNS O
! . O

That DT O
happened VBD O
in IN O
my PRP$ O
case NN O
, , O
so IN O
I PRP O
had VBD O
to TO O
increase VB O
the DT O
number NN O
of IN O
pixels NNS O
in IN O
my PRP$ O
ray NNP O
tracer NN O
until IN O
it PRP O
took VBD O
a DT O
few JJ O
seconds NNS O
to TO O
run VB O
. . O

You PRP O
could MD O
even RB O
just RB O
run VB O
your PRP$ O
program NN O
over RB O
and CC O
over IN O
again RB O
in IN O
a DT O
loop NN O
. . O


## NN O
An DT O
Important NNP O
Note NN O


The DT O
' POS O
JavaScript NNP B-KEYWORD
' POS O
code NN O
used VBN O
by IN O
the DT O
Micro:Bit NNP B-KEYWORD
is VBZ O
actually RB O
[TypeScript](https://www.typescriptlang.org/ JJ O
). NN O

TypeScript NNP O
isn't NN O
natively RB O
supported VBN O
by IN O
the DT O
browser NN O
, , O
so IN O
we PRP O
have VBP O
to TO O
[transpile](https://en.wikipedia.org/wiki/Source-to-source_compiler NNP O
) ) O
it PRP O
into IN O
JavaScript NNP B-KEYWORD
. . O

The DT O
method NN O
is VBZ O
quite RB O
straightforward JJ O
: : O


1 CD O
. . O
[Install NN O
npm](https://www.npmjs.com/get-npm JJ O
) ) O
by IN O
clicking VBG O
the DT O
link NN O
and CC O
following VBG O
the DT O
instructions NNS O
for IN O
your PRP$ O
operating VBG O
system NN O

1 CD O
. . O
Install NN O
TypeScript NNP O
by IN O
running VBG O
`npm NN O
install NN O
- : O
g SYM O
typescript` NNS O
in IN O
the DT O
command NN O
line NN O

1 CD O
. . O
With IN O
your PRP$ O
code NN O
in IN O
a DT O
file NN O
named VBD O
`myCode.ts` NN O
, , O
navigate NN O
to TO O
that DT O
folder NN O
and CC O
run VB O
`tsc NN O
myCode.ts` NN O


The DT O
compiled JJ O
JavaScript NNP B-KEYWORD
will MD O
be VB O
written VBN O
to TO O
a DT O
file NN O
called VBN O
`myCode.js` NN O
, , O
ready JJ O
to TO O
be VB O
used VBN O
in IN O
your PRP$ O
test NN O
bench NN O
. . O

You'll NN O
need VBP O
to TO O
repeat VB O
the DT O
last JJ O
step NN O
any DT O
time NN O
you PRP O
make VBP O
changes NNS O
to TO O
`myCode.ts` NNP O
. . O


## NN O
Using VBG O
the DT O
Profiler NNP B-KEYWORD


Open NNP O
up RP O
your PRP$ O
HTML NNP O
file NN O
and CC O
check NN O
that IN O
your PRP$ O
code NN O
is VBZ O
running VBG O
. . O

If IN O
you PRP O
haven't VBP O
set VBN O
up RP O
any DT O
outputs NNS O
, , O
it PRP O
could MD O
be VB O
hard JJ O
to TO O
tell VB O
- - O
try VB O
adding VBG O
`console.log("It's NN O
working!")` NN O
somewhere RB O
in IN O
your PRP$ O
code NN O
. . O

After IN O
recompiling VBG O
and CC O
refreshing VBG O
the DT O
web NN O
page NN O
, , O
you PRP O
should MD O
see VB O
the DT O
message NN O
printed VBN O
in IN O
the DT O
console NN O
. . O

To TO O
access VB O
the DT O
console NN O
, , O
open JJ O
developer NN O
tools NNS O
by IN O
right-clicking JJ O
on IN O
the DT O
page NN O
and CC O
selecting VBG O
`Inspect JJ O
Element` NNS O
. . O

Then RB O
, , O
switch VB O
to TO O
the DT O
`Console` NN O
tab NN O
. . O


Now RB O
we PRP O
know VBP O
that's VB O
all DT O
working VBG O
, , O
it's JJ O
time NN O
to TO O
start VB O
inspecting VBG O
your PRP$ O
code NN O
. . O

There EX O
are VBP O
two CD O
tabs NNS O
that WDT O
we're VBP O
interested JJ O
in IN O
: : O
`Performance` NN B-KEYWORD
and CC O
`Memory` NN O
. . O

The DT O
Performance NNP B-KEYWORD
tab NN O
shows VBZ O
you PRP O
how WRB O
long JJ O
each DT O
function NN O
is VBZ O
taking VBG O
, , O
both DT O
on IN O
a DT O
per-call JJ O
level NN O
, , O
and CC O
in IN O
total JJ O
. . O

The DT O
Memory NN O
tab NN O
shows VBZ O
you PRP O
where WRB O
memory NN O
is VBZ O
being VBG O
allocated VBN O
and CC O
how WRB O
much JJ O
is VBZ O
being VBG O
used VBN O
while IN O
the DT O
program NN O
was VBD O
running VBG O
. . O


### NN O
Performance NNP B-KEYWORD


In IN O
the DT O
performance NN B-KEYWORD
tab NN O
, , O
press NN O
the DT O
circular JJ O
`Record` NN O
button NN O
and CC O
start VB O
running VBG O
your PRP$ O
program NN O
. . O

After IN O
a DT O
few JJ O
seconds NNS O
, , O
press NN O
the DT O
button NN O
again RB O
to TO O
stop VB O
recording NN O
and CC O
wait VB O
for IN O
it PRP O
to TO O
process VB O
. . O

You PRP O
should MD O
see VB O
something NN O
like IN O
this DT O
: : O


! . O
[The DT O
performance NN B-KEYWORD
tab NN O
of IN O
developer NN B-KEYWORD
tools NNS I-KEYWORD
is VBZ O
shown VBN O
. . O

It PRP O
has VBZ O
a DT O
number NN O
of IN O
small JJ O
squares NNS O
for IN O
each DT O
function NN O
that IN O
ran]({{ NN O
site.github.url NN O
}}/swaterman/assets/microbit-optimisation/performance.png JJ O
" '' O
It's NN O
scary JJ O
at IN O
first JJ O
, , O
but CC O
this DT O
is VBZ O
one CD O
of IN O
the DT O
most RBS O
helpful JJ O
things NNS O
ever RB O
") VBP O


Time NNP O
increases NNS O
from IN O
left VBD O
to TO O
right NN O
, , O
and CC O
each DT O
rectangle NN O
is VBZ O
the DT O
function NN O
in IN O
your PRP$ O
code NN O
that WDT O
was VBD O
running VBG O
at IN O
the DT O
time NN O
. . O

When WRB O
one CD O
function NN O
is VBZ O
under IN O
another DT O
, , O
it PRP O
means VBZ O
that IN O
the DT O
bottom NN O
one CD O
was VBD O
called VBN O
by IN O
the DT O
top JJ O
one CD O
. . O

The DT O
name NN O
of IN O
the DT O
function NN O
is VBZ O
written VBN O
on IN O
the DT O
rectangle NN O
. . O

Zoom NNP O
in IN O
and CC O
see VB O
which WDT O
functions NNS O
are VBP O
taking VBG O
the DT O
longest JJS O
in IN O
your PRP$ O
code NN O
. . O

Those DT O
functions NNS O
are VBP O
the DT O
ones NNS O
that IN O
you PRP O
should MD O
try VB O
to TO O
optimise VB B-KEYWORD
. . O


I'm NNP O
not RB O
going VBG O
to TO O
discuss VB O
* NN O
how WRB O
* NN O
to TO O
optimise VB B-KEYWORD
your PRP$ O
code NN O
, , O
because IN O
it's NN O
an DT O
entire JJ O
topic NN O
in IN O
itself PRP O
. . O

A DT O
few JJ O
techniques NNS O
I'd NNP O
recommend VB O
looking VBG O
into IN O
are VBP O
: : O


* NN O
[Memoization](https://en.wikipedia.org/wiki/Memoization NN O
): NNP O
When WRB O
a DT O
function NN O
is VBZ O
called VBN O
with IN O
some DT O
arguments NNS O
for IN O
the DT O
first JJ O
time NN O
, , O
the DT O
result NN O
is VBZ O
stored VBN O
in IN O
a DT O
lookup NN O
table NN O
. . O

On IN O
future JJ O
calls NNS O
, , O
the DT O
arguments NNS O
are VBP O
used VBN O
to TO O
get VB O
the DT O
result NN O
from IN O
the DT O
lookup NN O
table NN O
, , O
instead RB O
of IN O
computing VBG O
it PRP O
again RB O
. . O

* NN O
[Function NN O
Inlining](https://en.wikipedia.org/wiki/Inline_expansion NNP O
): NN O
Copying VBG O
the DT O
contents NNS O
of IN O
a DT O
function NN O
into IN O
the DT O
part NN O
of IN O
the DT O
code NN O
where WRB O
you PRP O
previously RB O
called VBD O
that DT O
function NN O
, , O
allowing VBG O
you PRP O
to TO O
remove VB O
the DT O
function NN O
. . O

This DT O
is VBZ O
useful JJ O
when WRB O
a DT O
function NN O
gets VBZ O
called VBN O
millions NNS O
of IN O
times NNS O
as IN O
each DT O
function NN O
call NN O
introduces VBZ O
a DT O
tiny JJ O
delay NN O
. . O

* NN O
[Precomputation](https://en.wikipedia.org/wiki/Precomputation NN O
): NNP O
Calculating NNP O
every DT O
possible JJ O
result NN O
of IN O
a DT O
function NN O
externally RB O
and CC O
hard-coding JJ O
it PRP O
into IN O
your PRP$ O
program NN O
. . O

This DT O
helps VBZ O
when WRB O
the DT O
range NN O
of IN O
arguments NNS O
is VBZ O
very RB O
small JJ O
and CC O
known VBN O
in IN O
advance NN O
, , O
but CC O
the DT O
calculation NN O
is VBZ O
so RB O
complex JJ O
that IN O
there's NN O
no DT O
realistic JJ O
way NN O
to TO O
run VB O
it PRP O
on IN O
the DT O
Micro:Bit NNP B-KEYWORD
. . O

* NN O
[Lazy JJ O
Loading](https://en.wikipedia.org/wiki/Lazy_loading NNP O
): NN O
Only RB O
calculate VB O
things NNS O
when WRB O
you're NN O
absolutely RB O
sure JJ O
the DT O
result NN O
will MD O
get VB O
used VBN O
. . O

This DT O
is VBZ O
a DT O
good JJ O
general JJ O
principle NN O
to TO O
look VB O
out IN O
for IN O
in IN O
any DT O
project NN O
, , O
and CC O
helps VBZ O
reduce VB O
wasted VBN O
CPU NNP O
time NN O
. . O


In IN O
the DT O
performance NN B-KEYWORD
profiler NN I-KEYWORD
, , O
you PRP O
may MD O
see VB O
that IN O
your PRP$ O
program NN O
spends VBZ O
a DT O
lot NN O
of IN O
time NN O
doing VBG O
* NN O
garbage NN O
collection NN O
* NN O
( ( O
GC NNP O
). NN O

This DT O
happens VBZ O
when WRB O
you PRP O
use VBP O
lots NNS O
of IN O
memory NN O
in IN O
your PRP$ O
program NN O
. . O

High NNP O
memory NN O
use NN O
means VBZ O
the DT O
JavaScript NNP B-KEYWORD
interpreter NN I-KEYWORD
constantly RB O
has VBZ O
to TO O
pause VB O
execution NN O
and CC O
tidy NN O
up RB O
after IN O
you PRP O
. . O

If IN O
that DT O
is VBZ O
the DT O
case NN O
in IN O
your PRP$ O
code NN O
, , O
you PRP O
should MD O
check VB O
out RP O
the DT O
* NN O
Memory NN O
* NN O
tab NN O
. . O


### NN O
Memory NN O


The DT O
memory NN O
tab NN O
works VBZ O
just RB O
like IN O
the DT O
performance NN B-KEYWORD
tab NN O
. . O

First LS O
, , O
select VBP O
the DT O
`Allocation NNP O
Sampling` NNP O
profile NN B-KEYWORD
, , O
then RB O
hit VBD O
`Start` NN O
. . O

Your PRP$ O
code NN O
will MD O
run VB O
much RB O
slower JJR O
while IN O
the DT O
memory NN O
profiler NN O
is VBZ O
running VBG O
, , O
so RB O
let VB O
it PRP O
run VB O
for IN O
a DT O
while NN O
before IN O
clicking VBG O
to TO O
stop VB O
the DT O
recording NN O
. . O

After IN O
giving VBG O
it PRP O
a DT O
few JJ O
seconds NNS O
to TO O
generate VB O
the DT O
report NN O
, , O
it PRP O
should MD O
look VB O
something NN O
like IN O
this DT O
: : O


! . O
[Shows VBZ O
the DT O
memory NN O
tab NN O
in IN O
developer NN B-KEYWORD
tools NNS I-KEYWORD
. . O

There EX O
is VBZ O
a DT O
big JJ O
list NN O
of IN O
different JJ O
places NNS O
that IN O
memory NN O
was VBD O
allocated.]({{ JJ O
site.github.url NN O
}}/swaterman/assets/microbit-optimisation/memory.png JJ O
" '' O
Click NNP O
an DT O
entry NN O
in IN O
the DT O
list NN O
to TO O
see VB O
more JJR O
information NN O
about IN O
what WP O
is VBZ O
being VBG O
saved VBN O
in IN O
memory NN O
") NN O


The DT O
default NN O
view NN O
is VBZ O
`Summary` NN O
but CC O
you PRP O
should MD O
change VB O
that IN O
to TO O
`Containment` VB O
. . O

Then RB O
, , O
click NN O
to TO O
open VB O
the DT O
`Window NN O
/ NN O
<your PRP$ O
url>` JJ O
category NN O
. . O

Here RB O
, , O
you PRP O
will MD O
see VB O
all DT O
of IN O
the DT O
memory NN O
allocated VBN O
by IN O
your PRP$ O
code NN O
. . O

The DT O
amount NN O
of IN O
memory NN O
allocated VBD O
is VBZ O
written VBN O
in IN O
the DT O
far-right JJ O
column NN O
, , O
`Retained VBD O
Size` NN O
. . O

Just RB O
to TO O
the DT O
left NN O
of IN O
that DT O
, , O
it PRP O
says VBZ O
which WDT O
line NN O
of IN O
code NN O
allocated VBD O
the DT O
memory NN O
, , O
e.g NN O
. . O
`myCode.js:85` NN O
means VBZ O
line NN O
85 CD O
. . O

Look VB O
for IN O
any DT O
of IN O
your PRP$ O
methods NNS O
near IN O
the DT O
top JJ O
of IN O
the DT O
list NN O
- - O
those DT O
are VBP O
the DT O
ones NNS O
that WDT O
are VBP O
using VBG O
the DT O
most RBS O
memory NN O
and CC O
need VBP O
fixing NN O
. . O


The DT O
following VBG O
code NN O
is VBZ O
an DT O
example NN O
of IN O
a DT O
function NN O
with IN O
high JJ O
memory NN O
use NN O
because IN O
it PRP O
creates VBZ O
a DT O
new JJ O
object VBP O
each DT O
time NN O
it PRP O
gets VBZ O
called VBN O
: : O


~~~ts NN O

function NN O
getRange(values NNS O
: : O
number[] NN O
) ) O
{ ( O

return NN O
{ ( O

min NN O
: : O
Math.min NNP O
( ( O
values NNS O
); NN O

max NN O
: : O
Math.max NNP O
( ( O
values NNS O
); NN O

} ) O

} ) O

~~~ NN O


To TO O
reduce VB O
the DT O
memory NN O
use NN O
of IN O
a DT O
function NN O
like IN O
that DT O
, , O
try VB O
removing VBG O
any DT O
object VBP O
creation NN O
and CC O
instead RB O
store NN O
the DT O
result NN O
in IN O
a DT O
global JJ O
variable NN O
. . O

In IN O
our PRP$ O
case NN O
, , O
we PRP O
could MD O
use VB O
two CD O
global JJ O
variables NNS O
, , O
`minResult` NN O
and CC O
`maxResult` NN O
: : O


~~~ts NN O

let VB O
minResult NN O
: : O
number NN O
= SYM O
0 CD O
; : O

let VB O
maxResult NN O
: : O
number NN O
= SYM O
0 CD O
; : O


function NN O
getRange(values NNS O
: : O
number[] NN O
) ) O
{ ( O

minResult NN O
= SYM O
Math.min NNP O
( ( O
values NNS O
); NN O

maxResult NN O
= SYM O
Math.max NNP O
( ( O
values NNS O
); NN O

} ) O

~~~ NN O


Alternatively RB O
, , O
you PRP O
could MD O
create VB O
one CD O
object NN O
in IN O
a DT O
global JJ O
variable NN O
and CC O
simply RB O
mutate VB O
its PRP$ O
properties NNS O
, , O
like IN O
this DT O
: : O


~~~ts NN O

const NN O
rangeResult NN O
= SYM O
{ ( O

min NN O
: : O
0 CD O
; : O

max NN O
: : O
0 CD O
; : O

} ) O
; : O


function NN O
getRange(values NNS O
: : O
number[] NN O
) ) O
{ ( O

rangeResult.min NN O
= SYM O
Math.min NNP O
( ( O
values NNS O
); NN O

rangeResult.max NN O
= SYM O
Math.max NNP O
( ( O
values NNS O
); NN O

} ) O

~~~ NN O


Using VBG O
the DT O
profiler NN O
, , O
you PRP O
should MD O
be VB O
able JJ O
to TO O
incrementally RB O
improve VB O
your PRP$ O
code NN O
, , O
focusing VBG O
on IN O
the DT O
parts NNS O
that IN O
need VBP O
it PRP O
most JJS O
. . O

That DT O
incremental JJ O
approach NN O
lets VBZ O
you PRP O
optimise NN O
as IN O
little JJ O
of IN O
your PRP$ O
code NN O
as IN O
possible JJ O
, , O
while IN O
still RB O
seeing VBG O
positive JJ O
results NNS O
overall JJ O
. . O


## NN O
Conclusion NNP O


A DT O
profiler NN B-KEYWORD
is VBZ O
a DT O
great JJ O
way NN O
to TO O
start VB O
intelligently RB O
optimising VBG B-KEYWORD
your PRP$ O
code NN O
. . O

They PRP O
help VBP O
you PRP O
focus VBP O
your PRP$ O
efforts NNS O
on IN O
the DT O
areas NNS O
that WDT O
would MD O
benefit VB O
most JJS O
from IN O
being VBG O
optimised VBN B-KEYWORD
. . O

Since IN O
optimisation NN B-KEYWORD
usually RB O
makes VBZ O
your PRP$ O
code NN O
harder RBR O
to TO O
read VB O
and CC O
maintain VB O
, , O
it's NN O
important JJ O
to TO O
only RB O
optimise VB B-KEYWORD
those DT O
' POS O
hot JJ O
spots NNS O
'. POS O


Hopefully NNP O
, , O
with IN O
the DT O
help NN O
of IN O
a DT O
profiler NN B-KEYWORD
, , O
you'll NN O
be VB O
able JJ O
to TO O
take VB O
your PRP$ O
Micro:Bit NNP B-KEYWORD
code NN O
to TO O
new JJ O
heights NNS O
! . O


<hr/> NN O


If IN O
you're NN O
interested JJ O
in IN O
reading VBG O
more JJR O
about IN O
how WRB O
profilers NNS B-KEYWORD
can MD O
be VB O
used VBN O
to TO O
optimise VB B-KEYWORD
code NN O
, , O
check NN O
out IN O
one CD O
of IN O
my PRP$ O
older JJR O
blog NN O
posts NNS O
[Slow NNP O
Code NNP O
HATES NNP O
him PRP O
! . O
Optimising VBG B-KEYWORD
a DT O
web NN O
app NN O
from IN O
1 CD O
to TO O
60fps](https://blog.scottlogic.com/2020/02/17/minesweeper-optimisation.html NN O
). NN O

--- : O

author NN O
: : O
cprice NN O

layout NN O
: : O
default_post NN O

title NN O
: : O
Rendering VBG B-KEYWORD
charts NNS I-KEYWORD
with IN O
OffscreenCanvas NNP B-KEYWORD

categories NNS O
: : O

- : O
Tech NNP O

summary NN O
: : O
" '' O
Rendering VBG B-KEYWORD
charts NNS I-KEYWORD
can MD O
be VB O
a DT O
very RB O
intensive JJ O
operation NN O
for IN O
the DT O
browser NN O
, , O
especially RB O
multiple JJ O
charting VBG O
widgets NNS O
in IN O
the DT O
context NN O
of IN O
a DT O
wider JJR O
application NN O
. . O

OffscreenCanvas NNP B-KEYWORD
is VBZ O
growing VBG O
in IN O
browser NN O
support NN O
and CC O
allows VBZ O
canvas NN B-KEYWORD
rendering VBG I-KEYWORD
to TO O
be VB O
delegated VBN O
to TO O
a DT O
WebWorker NNP B-KEYWORD
. . O

This DT O
post NN O
looks VBZ O
at IN O
what WP O
performance NN O
improvements NNS O
we PRP O
can MD O
realistically RB O
expect VB O
and CC O
some DT O
gotchas NN O
that WDT O
can MD O
crop VB O
up RB O
along IN O
the DT O
way NN O
." . O

--- : O


Rendering VBG B-KEYWORD
charts NNS I-KEYWORD
can MD O
be VB O
a DT O
very RB O
intensive JJ O
operation NN O
for IN O
the DT O
browser NN O
, , O
especially RB O
multiple JJ O
charting VBG O
widgets NNS O
in IN O
the DT O
context NN O
of IN O
a DT O
wider JJR O
application NN O
. . O

OffscreenCanvas NNP B-KEYWORD
is VBZ O
growing VBG O
in IN O
browser NN O
support NN O
and CC O
allows VBZ O
canvas NN B-KEYWORD
rendering VBG I-KEYWORD
to TO O
be VB O
delegated VBN O
to TO O
a DT O
WebWorker NNP O
. . O

This DT O
post NN O
looks VBZ O
at IN O
what WP O
performance NN O
improvements NNS O
we PRP O
can MD O
realistically RB O
expect VB O
and CC O
some DT O
gotchas NN O
that WDT O
can MD O
crop VB O
up RB O
along IN O
the DT O
way NN O
. . O


## NN O
Why WRB O
OffscreenCanvas NNP B-KEYWORD
? . O


The DT O
code NN O
involved VBN O
in IN O
rendering VBG B-KEYWORD
a DT O
chart NN B-KEYWORD
can MD O
be VB O
computationally RB O
expensive JJ O
on IN O
its PRP$ O
own JJ O
. . O

As IN O
has VBZ O
been VBN O
[well NN O
documented VBN O
elsewhere](https://developers.google.com/web/fundamentals/codelabs/web-perf JJ O
), NN O
smooth JJ O
interactions/animations NNS O
require VBP O
consistently RB O
rendering VBG B-KEYWORD
within IN O
the DT O
~10ms NN O
frame NN O
budget NN O
to TO O
achieve VB O
60fps CD O
. . O

Worse JJR O
still RB O
, , O
overrunning VBG O
on IN O
any DT O
frame NN O
will MD O
lead VB O
to TO O
noticeable JJ O
lag NN O
for IN O
the DT O
user NN O
. . O


However RB O
, , O
when WRB O
rendering VBG B-KEYWORD
charts NNS I-KEYWORD
this DT O
is VBZ O
often RB O
further RBR O
exacerbated VBN O
by IN O
- - O


* NN O
Large/multiple NNP O
datasets/annotations NNS O
- : O
requires VBZ O
optimising VBG O
the DT O
media-type JJ O
( ( O
SVG/canvas/WebGL NNP O
) ) O
on IN O
a DT O
per IN O
series/annotation NN O
basis NN O
or CC O
aggressive JJ O
culling NN O
of IN O
offscreen NN O
data NNS O
points NNS O
. . O

* NN O
Being VBG O
a DT O
small JJ O
part NN O
of IN O
a DT O
larger JJR O
application NN O
- - O
requires VBZ O
consistently RB O
rendering VBG B-KEYWORD
within IN O
significantly RB O
less JJR O
than IN O
10ms CD O
to TO O
allow VB O
the DT O
other JJ O
charts/widgets NNS B-KEYWORD
within IN O
the DT O
application NN O
time NN O
to TO O
render VB O
. . O


These DT O
challenges NNS O
are VBP O
ideal JJ O
candidates NNS O
for IN O
a DT O
classic JJ O
divide NN O
and CC O
conquer NN O
approach NN O
, , O
spreading VBG O
the DT O
computation NN O
out IN O
accross IN O
multiple JJ O
workers NNS O
. . O

However RB O
, , O
before IN O
OffscreenCanvas NNP B-KEYWORD
all DT O
rendering VBG B-KEYWORD
code NN O
had VBD O
to TO O
run VB O
within IN O
the DT O
main JJ O
window NN O
in IN O
order NN O
to TO O
have VB O
access NN O
to TO O
the DT O
necessary JJ O
APIs NNP O
. . O


* NN O
Technically NNP O
it PRP O
has VBZ O
always RB O
been VBN O
possible JJ O
for IN O
purely RB O
algorithmic JJ O
code NN O
to TO O
be VB O
offloaded VBN O
to TO O
a DT O
WebWorker NNP B-KEYWORD
. . O

However RB O
, , O
as IN O
the DT O
rendering VBG B-KEYWORD
calls NNS O
still RB O
had VBD O
to TO O
be VB O
made VBN O
from IN O
the DT O
main JJ O
window NN O
, , O
this DT O
required VBD O
a DT O
relative JJ O
leap NN O
in IN O
messaging VBG O
complexity NN O
within IN O
the DT O
chart NN B-KEYWORD
often RB O
for IN O
neglibile NN O
gain NN O
. . O
* NN O


The DT O
OffscreenCanvas NNP B-KEYWORD
specification NN O
provides VBZ O
a DT O
way NN O
to TO O
transfer VB O
control NN O
of IN O
the DT O
drawing VBG B-KEYWORD
surface NN I-KEYWORD
of IN O
a DT O
canvas NN B-KEYWORD
element NN I-KEYWORD
to TO O
a DT O
WebWorker NNP B-KEYWORD
. . O

It PRP O
is VBZ O
currently RB O
supported VBN O
in IN O
Chrome NNP O
and CC O
Edge NNP O
( ( O
since IN O
its PRP$ O
adoption NN O
of IN O
Chromium NNP O
earlier RBR O
this DT O
year NN O
). NN O
Firefox NNP O
expects VBZ O
to TO O
have VB O
support NN O
by IN O
the DT O
second JJ O
half NN O
of IN O
this DT O
year NN O
but CC O
Safari NNP O
have VBP O
yet RB O
to TO O
commented VBD O
publically RB O
on IN O
support NN O
. . O
. . O
. . O


## NN O
Rendering VBG B-KEYWORD
A DT O
Chart NNP B-KEYWORD
Using VBG O
OffscreenCanvas NNP B-KEYWORD


[<img NN O
src="{{ NN O
site.baseurl NN O
}}/cprice/assets/offscreen-canvas.jpg JJ O
" '' O
alt="Example JJ O
chart NN B-KEYWORD
screenshot NN O
showing VBG O
100,000 CD O
multi-coloured VBN O
points">](https://chrisprice.io/offscreen-canvas/?100000 NN O
) ) O


To TO O
better JJR O
understand VB O
some DT O
of IN O
the DT O
benefits NNS O
and CC O
potential JJ O
pitfalls NNS O
, , O
we'll NN O
work NN O
through IN O
an DT O
example NN O
of IN O
rendering VBG B-KEYWORD
the DT O
graphically RB O
intense JJ O
chart NN B-KEYWORD
shown VBN O
above IN O
. . O



~~~js NN O

const NN O
offscreenCanvas NN O
= SYM O
canvasContainer NN O

. . O
querySelector('canvas NN O
') NN O

. . O
transferControlToOffscreen NN O
(); NN O

const NN O
worker NN O
= SYM O
new JJ O
Worker('worker.js NNP O
'); NNP O

worker.postMessage({ NN O
offscreenCanvas NN O
} ) O
, , O
[offscreenCanvas] NN O
); NN O

~~~ NN O


First LS O
off IN O
we PRP O
request VBP O
an DT O
OffscreenCanvas NNP B-KEYWORD
from IN O
the DT O
`canvas` NN O
element NN O
using VBG O
the DT O
new JJ O
`transferControlToOffscreen()` NN O
method NN O
. . O

We PRP O
then RB O
call VBP O
`worker.postMessage({ NN O
canvas NN O
: : O
offscreenCanvas NN O
} ) O
, , O
[offscreenCanvas])` NN O
to TO O
send VB O
a DT O
message NN O
to TO O
the DT O
worker NN O
containing VBG O
a DT O
reference NN O
to TO O
the DT O
`offscreenCanvas` NN O
. . O

Crucially NNP O
we PRP O
also RB O
pass VBP O
`[offscreenCanvas]` NN O
as IN O
the DT O
second JJ O
argument NN O
to TO O
actually RB O
transfer VB O
ownership NN O
, , O
allowing VBG O
the DT O
worker NN O
sole JJ O
control NN O
of IN O
the DT O
OffscreenCanvas NNP B-KEYWORD
. . O


~~~js NN O

canvasContainer.addEventListener('measure NN O
', NN O
( ( O
{ ( O
detail NN O
} ) O
) ) O
=> NN O
{ ( O

const NN O
{ ( O
width NN O
, , O
height NN O
} ) O
= SYM O
detail NN O
; : O

worker.postMessage({ NN O
width NN O
, , O
height NN O
} ) O
); NN O

} ) O
); NN O

canvasContainer.requestRedraw NN O
(); NN O

~~~ NN O


Whilst NN O
the DT O
dimensions NNS O
of IN O
the DT O
OffscreenCanvas NNP B-KEYWORD
are VBP O
initially RB O
inherited VBN O
from IN O
the DT O
`canvas` NN O
element's NN O
`width`/`height` NN O
attributes NNS O
, , O
it PRP O
is VBZ O
our PRP$ O
responsibility NN O
to TO O
keep VB O
these DT O
up-to-date JJ O
if IN O
the DT O
`canvas` NN O
element NN O
is VBZ O
resized VBN O
. . O

Here RB O
we PRP O
are VBP O
using VBG O
the DT O
`measure` JJ O
event NN O
from IN O
`d3fc-canvas` JJ O
to TO O
provide VB O
us PRP O
with IN O
`requestAnimationFrame` NN O
aligned VBN O
measurements NNS O
of IN O
our PRP$ O
canvas NN B-KEYWORD
which WDT O
we PRP O
pass VBP O
into IN O
the DT O
worker NN O
. . O


* NN O
To TO O
simplify VB O
our PRP$ O
example NN O
, , O
we're NN O
going VBG O
to TO O
be VB O
making VBG O
use NN O
of IN O
some DT O
[d3fc](https://d3fc.io NN O
) ) O
components NNS O
. . O

These DT O
are VBP O
a DT O
set NN O
of IN O
utility NN O
components NNS O
which WDT O
either CC O
aggregate JJ O
d3 NN O
components NNS O
or CC O
supplement NN O
the DT O
range NN O
of IN O
functionality NN O
available JJ O
. . O

They PRP O
are VBP O
not RB O
required VBN O
to TO O
use VB O
OffscreenCanvas NNP B-KEYWORD
and CC O
all DT O
of IN O
the DT O
concepts NNS O
discussed VBD O
also RB O
apply VB O
to TO O
vanilla NN O
JS NNP O
. . O
* NN O


Now RB O
for IN O
the DT O
code NN O
within IN O
`worker.js` NN O
. . O

In IN O
this DT O
example NN O
, , O
to TO O
really RB O
push VB O
the DT O
rendering VBG B-KEYWORD
performance NN I-KEYWORD
we're NN O
going VBG O
to TO O
use VB O
WebGL NNP O
. . O


~~~js NN O

addEventListener('message NN O
', NN O
( ( O
{ ( O
data NNS O
: : O
{ ( O
offscreenCanvas NN O
, , O
width NN O
, , O
height NN O
} ) O
} ) O
) ) O
=> NN O
{ ( O

if IN O
( ( O
offscreenCanvas NN O
! . O
= SYM O
null NN O
) ) O
{ ( O

const NN O
gl NN O
= SYM O
offscreenCanvas.getContext('webgl NN O
'); NN O

series.context NN O
( ( O
gl NN O
); NN O

series NN O
( ( O
data NNS O
); VBP O

} ) O


if IN O
( ( O
width NN O
! . O
= SYM O
null NN O
&& NN O
height NN O
! . O
= SYM O
null NN O
) ) O
{ ( O

const NN O
gl NN O
= SYM O
series.context JJ O
(); NN O

gl.canvas.width NN O
= SYM O
width NN O
; : O

gl.canvas.height NN O
= SYM O
height NN O
; : O

gl.viewport(0 NN O
, , O
0 CD O
, , O
gl.canvas.width NN O
, , O
gl.canvas.height NN O
); NN O

} ) O

} ) O
); NN O

~~~ NN O


When WRB O
we PRP O
receive VBP O
a DT O
message NN O
containing VBG O
a DT O
`canvas` NN O
property NN O
, , O
we PRP O
assume VBP O
it's JJ O
come VB O
from IN O
the DT O
main JJ O
window NN O
, , O
retrieve VBP O
the DT O
`webgl` NN O
context NN O
from IN O
the DT O
`canvas` NN O
and CC O
pass VB O
this DT O
into IN O
our PRP$ O
`series` NN O
component NN O
. . O

We PRP O
then RB O
invoke VBD O
our PRP$ O
`series` NN O
component NN O
with IN O
the DT O
`data` NN O
we PRP O
want VBP O
it PRP O
to TO O
render VB O
( ( O
we'll NN O
cover NN O
where WRB O
these DT O
variables NNS O
come VBP O
from IN O
below IN O
). NN O


We PRP O
additionally RB O
check NN O
for IN O
`width`/`height` NN O
properties NNS O
on IN O
the DT O
message NN O
and CC O
use VB O
those DT O
to TO O
set VB O
the DT O
dimensions NNS O
of IN O
the DT O
`offscreenCanvas` NN O
and CC O
the DT O
[WebGL NN O
viewport](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/viewport NN O
). NN O
The DT O
`offscreenCanvas` NN O
reference NN O
isn't NN O
used VBN O
directly RB O
because IN O
the DT O
message NN O
contains VBZ O
either CC O
the DT O
`offscreenCanvas` NN O
property NN O
* NN O
OR CC O
* NN O
the DT O
`width`/`height` NN O
properties NNS O
. . O


The DT O
rest NN O
of IN O
the DT O
code NN O
in IN O
the DT O
worker NN O
sets NNS O
up RP O
the DT O
visualisation NN O
we're NN O
going VBG O
to TO O
render VB O
. . O

If IN O
you're NN O
not RB O
interested JJ O
in IN O
the DT O
detail NN O
, , O
skip NN O
ahead RB O
to TO O
the DT O
[next JJ O
section](#offscreencanvas-performance-considerations JJ O
). NN O


~~~js NN O

const NN O
randomNormal NN O
= SYM O
d3.randomNormal(0 NN O
, , O
1 CD O
); NN O

const NN O
randomLogNormal NN O
= SYM O
d3.randomLogNormal NN O
(); NN O


const NN O
data NNS O
= SYM O
Array.from({ NNP O
length NN O
: : O
1e5 CD O
} ) O
, , O
() NN O
=> NN O
( ( O
{ ( O

x SYM O
: : O
randomNormal NN O
(), NN O

y NN O
: : O
randomNormal NN O
(), NN O

size NN O
: : O
randomLogNormal NN O
() NN O
* NN O
10 CD O

} ) O
)); NN O


const NN O
xScale NNP O
= SYM O
d3.scaleLinear NN O
(). NN O
domain([-5 NN O
, , O
5] CD O
); NN O


const NN O
yScale NNP O
= SYM O
d3.scaleLinear NN O
(). NN O
domain([-5 NN O
, , O
5] CD O
); NN O

~~~ NN O


First LS O
we PRP O
create VBP O
a DT O
dataset NN O
containing VBG O
a DT O
random JJ O
cluster NN O
of IN O
points NNS O
around IN O
the DT O
x/y NN O
origin NN O
and CC O
establish VB O
some DT O
appropriate JJ O
scales NNS O
. . O

We PRP O
don't VBP O
set VB O
the DT O
range NN O
on IN O
the DT O
scales NNS O
as IN O
the DT O
WebGL NNP O
series NN O
components NNS O
render VBP O
to TO O
full JJ O
canvas NN B-KEYWORD
size NN O
( ( O
`-1 JJ O
- - O
> NN O
+1` NN O
in IN O
normalised JJ O
device NN O
coordinates NNS O
). NN O


~~~js NN O

const NN O
series NN O
= SYM O
fc NN O

. . O
seriesWebglPoint NN O
() NN O

. . O
xScale(xScale NN O
) ) O

. . O
yScale(yScale NN O
) ) O

. . O
crossValue(d NN O
=> NN O
d.x NN O
) ) O

. . O
mainValue(d NN O
=> NN O
d.y NN O
) ) O

. . O
size(d JJ O
=> NN O
d.size NN O
) ) O

. . O
equals((previousData NN O
, , O
data NNS O
) ) O
=> NNP O
previousData.length NN O
> NN O
0 CD O
); NN O

~~~ NN O


Next JJ O
we PRP O
configure VBP O
a DT O
point NN O
series NN O
with IN O
the DT O
scales NNS O
. . O

We PRP O
then RB O
setup VBP O
appropriate JJ O
accessors NNS O
to TO O
allow VB O
it PRP O
to TO O
read VB O
the DT O
data NNS O
. . O


We PRP O
additionally RB O
set VBD O
a DT O
custom NN O
equality NN O
function NN O
to TO O
prevent VB O
the DT O
component NN O
transfering VBG O
`data` NN O
to TO O
the DT O
GPU NNP O
every DT O
render NN O
. . O

We PRP O
need VBP O
to TO O
do VB O
this DT O
explicitly RB O
because IN O
whilst IN O
we PRP O
know VBP O
we PRP O
won't MD O
ever RB O
modify VB O
it PRP O
, , O
the DT O
component NN O
can't NN O
know VB O
this DT O
without IN O
an DT O
expensive JJ O
dirty NN O
check NN O
. . O


~~~js NN O

const NN O
colorScale NN O
= SYM O
d3.scaleOrdinal(d3.schemeAccent NN O
); NN O


const NN O
webglColor NN O
= SYM O
color NN O
=> NN O
{ ( O

const NN O
{ ( O
r LS O
, , O
g SYM O
, , O
b SYM O
, , O
opacity NN O
} ) O
= SYM O
d3.color NN O
( ( O
color NN O
). NN O
rgb NN O
(); NN O

return NN O
[r NN O
/ NN O
255 CD O
, , O
g SYM O
/ NN O
255 CD O
, , O
b SYM O
/ NN O
255 CD O
, , O
opacity] NN O
; : O

} ) O
; : O


const NN O
fillColor NN O
= SYM O
fc NN O

. . O
webglFillColor NN O
() NN O

. . O
value((d NN O
, , O
i NNP O
) ) O
=> NNP O
webglColor(colorScale NN O
( ( O
i NNP O
))) NNP O

. . O
data NNS O
( ( O
data NNS O
); VBP O


series.decorate(program NN O
=> NN O
{ ( O

fillColor NN O
( ( O
program NN O
); NN O

} ) O
); NN O

~~~ NN O


This DT O
code NN O
adds VBZ O
a DT O
bit NN O
of IN O
colour NN O
to TO O
the DT O
chart NN B-KEYWORD
. . O

We PRP O
use VBP O
the DT O
point's NNS O
index NN O
in IN O
the DT O
dataset NN O
to TO O
select VB O
an DT O
appropriate JJ O
colour NN O
from IN O
the DT O
`colorScale` NN O
, , O
then RB O
convert VB O
it PRP O
to TO O
the DT O
required VBN O
format NN O
and CC O
use VB O
it PRP O
to TO O
decorate VB O
the DT O
rendered JJ B-KEYWORD
point NN O
. . O


~~~js NN O

function NN O
render NN O
() NN O
{ ( O

const NN O
ease NN O
= SYM O
5 CD O
* NN O
( ( O
0.51 CD O
+ NN O
0.49 CD O
* NN O
Math.sin(Date.now NNP O
() NN O
/ NN O
1e3 CD O
)); NN O

xScale.domain([-ease NN O
, , O
ease] VBN O
); NN O

yScale.domain([-ease NN O
, , O
ease] VBN O
); NN O

series NN O
( ( O
data NNS O
); VBP O

requestAnimationFrame NN O
( ( O
render NN O
); NN O

} ) O

~~~ NN O


Now RB O
that IN O
we PRP O
have VBP O
some DT O
colour NN O
, , O
our PRP$ O
final JJ O
flourish NN O
is VBZ O
to TO O
add VB O
some DT O
animation NN O
to TO O
necessitate VB O
repeated VBN O
render NN B-KEYWORD
calls NNS O
and CC O
increasing VBG O
the DT O
rendering NN B-KEYWORD
load NN O
. . O

We'll NNP O
simulate VB O
zooming VBG O
in IN O
and CC O
out IN O
of IN O
the DT O
chart NN B-KEYWORD
by IN O
using VBG O
`requestAnimationFrame` NN O
to TO O
modify VB O
the DT O
`x/yScale.domain` NN O
properties NNS O
on IN O
each DT O
frame NN O
to TO O
an DT O
eased JJ O
, , O
scaled VBN O
and CC O
periodic JJ O
time-derived JJ O
value NN O
. . O

Additionally NNP O
we PRP O
modify VBP O
the DT O
message NN O
handler VBN O
to TO O
call VB O
`render()` NN O
to TO O
start VB O
the DT O
render NN O
loop NN O
, , O
rather RB O
than IN O
directly RB O
calling VBG O
`series NN O
( ( O
data)` NN O
. . O


~~~js NN O

importScripts NNS O
( ( O

'. POS O
/node_modules/d3-array/dist/d3-array.js JJ O
', NN O

'. POS O
/node_modules/d3-collection/dist/d3-collection.js JJ O
', NN O

'. POS O
/node_modules/d3-color/dist/d3-color.js JJ O
', NN O

'. POS O
/node_modules/d3-interpolate/dist/d3-interpolate.js JJ O
', NN O

'. POS O
/node_modules/d3-scale-chromatic/dist/d3-scale-chromatic.js JJ O
', NN O

'. POS O
/node_modules/d3-random/dist/d3-random.js JJ O
', NN O

'. POS O
/node_modules/d3-scale/dist/d3-scale.js JJ O
', NN O

'. POS O
/node_modules/d3-shape/dist/d3-shape.js JJ O
', NN O

'. POS O
/node_modules/d3fc-extent/build/d3fc-extent.js JJ O
', NN O

'. POS O
/node_modules/d3fc-random-data/build/d3fc-random-data.js JJ O
', NN O

'. POS O
/node_modules/d3fc-rebind/build/d3fc-rebind.js JJ O
', NN O

'. POS O
/node_modules/d3fc-series/build/d3fc-series.js JJ O
', NN O

'. POS O
/node_modules/d3fc-webgl/build/d3fc-webgl.js JJ O
' POS O

); NN O

~~~ NN O


There's NN O
one CD O
final JJ O
thing NN O
required VBN O
to TO O
make VB O
the DT O
example NN O
work NN O
and CC O
that's NN O
importing VBG O
the DT O
required VBN O
libraries NNS O
into IN O
the DT O
worker NN O
. . O

We PRP O
use VBP O
`importScripts` NN O
for IN O
this DT O
along IN O
with IN O
a DT O
manually RB O
resolved VBN O
list NN O
of IN O
depedencies NNS O
to TO O
avoid VB O
using VBG O
any DT O
build JJ O
tooling NN O
. . O

Unfortunately RB O
we PRP O
can't VBP O
just RB O
reference NN O
the DT O
full JJ O
d3/d3fc NN O
bundles NNS O
as IN O
they PRP O
both DT O
have VBP O
an DT O
implicit JJ O
dependency NN O
on IN O
the DT O
DOM NNP O
which WDT O
doesn't VBP O
exist VB O
in IN O
the DT O
worker NN O
. . O


Check VB O
out RP O
the DT O
example NN O
code NN O
on IN O
[GitHub](https://github.com/chrisprice/offscreen-canvas JJ O
). NN O


## NN O
OffscreenCanvas NNP B-KEYWORD
Performance NNP O
Considerations NNP O


We're NN O
driving VBG O
the DT O
animation NN O
using VBG O
`requestAnimationFrame` NN O
from IN O
within IN O
the DT O
worker NN B-KEYWORD
. . O

This DT O
allows VBZ O
the DT O
worker NN O
to TO O
continue VB O
rendering VBG B-KEYWORD
frames NNS O
even RB O
when WRB O
the DT O
main JJ O
thread NN O
is VBZ O
busy JJ O
with IN O
other JJ O
activities NNS O
. . O

Notice NNP O
how WRB O
the DT O
timestamp NN O
stops VBZ O
updating VBG O
when WRB O
the DT O
alert NN O
box NN O
is VBZ O
opened VBN O
in IN O
the DT O
demo NN O
( ( O
blocking VBG O
the DT O
main JJ O
thread NN O
). NN O


We PRP O
could MD O
have VB O
opted VBN O
to TO O
render VB B-KEYWORD
after IN O
each DT O
message NN O
received VBD O
from IN O
the DT O
main JJ O
window NN O
, , O
such JJ O
as IN O
an DT O
interaction NN O
event NN O
handler VBN O
or CC O
a DT O
data NNS O
update VBP O
received VBN O
over IN O
the DT O
network NN O
. . O

However RB O
, , O
if IN O
the DT O
main JJ O
window NN O
is VBZ O
busy JJ O
then RB O
the DT O
worker NN O
will MD O
be VB O
starved VBN O
of IN O
messages NNS O
and CC O
there EX O
will MD O
be VB O
no DT O
more JJR O
frames NNS O
rendered VBN B-KEYWORD
. . O


Continuously RB O
rendering VBG B-KEYWORD
in IN O
the DT O
absense NN O
of IN O
any DT O
visual JJ O
updates NNS O
is VBZ O
also RB O
a DT O
great JJ O
way NN O
to TO O
annoy VB O
your PRP$ O
users NNS O
by IN O
spinning JJ O
up RP O
fans NNS O
and CC O
running VBG O
down RB O
batteries NNS O
. . O

So RB O
in IN O
the DT O
real JJ O
world NN O
the DT O
right JJ O
choice NN O
will MD O
depend VB O
upon IN O
whether IN O
the DT O
worker NN O
can MD O
usefully RB O
render VB O
anything NN O
if IN O
it PRP O
is VBZ O
not RB O
receiving VBG O
updates NNS O
from IN O
the DT O
main JJ O
window NN O
. . O


On IN O
the DT O
subject NN O
of IN O
message NN O
passing VBG O
between IN O
the DT O
windows NNS O
, , O
the DT O
approach NN O
we've NN O
used VBN O
here RB O
is VBZ O
very RB O
simplistic JJ O
. . O

In IN O
fairness NN O
, , O
we PRP O
didn't VBP O
have VB O
a DT O
lot NN O
of IN O
messages NNS O
to TO O
pass VB O
so RB O
I'm NNP O
going VBG O
to TO O
chalk VB O
it PRP O
down RB O
as IN O
pragmatism NN O
rather RB O
than IN O
laziness NNS O
. . O

However RB O
, , O
in IN O
the DT O
real-world NN O
once RB O
interaction NN O
events NNS O
and CC O
data NNS O
updates NNS O
are VBP O
added VBN O
in IN O
the DT O
messaging VBG O
is VBZ O
going VBG O
to TO O
become VB O
a DT O
lot NN O
more JJR O
involved JJ O
. . O


The DT O
built-in JJ O
higher-level NN O
browser NN O
primitive JJ O
[MessageChannel](https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel JJ O
) ) O
allows VBZ O
you PRP O
to TO O
create VB O
mutliple JJ O
separate JJ O
messaging VBG O
channels NNS O
between IN O
the DT O
main JJ O
window NN O
and CC O
the DT O
worker NN B-KEYWORD
. . O

Each DT O
can MD O
then RB O
be VB O
used VBN O
for IN O
a DT O
specific JJ O
category NN O
of IN O
messages NNS O
to TO O
simplify VB O
handling VBG O
. . O

Alternatively RB O
there EX O
are VBP O
libraries NNS O
like IN O
[Comlink](https://github.com/GoogleChromeLabs/comlink NN O
) ) O
which WDT O
hide VBP O
the DT O
low-level JJ O
message NN O
passing VBG O
behind IN O
asynchronous JJ O
interfaces NNS O
using VBG O
[Proxies](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy JJ O
). NN O


Another DT O
interestesting VBG O
feature NN O
of IN O
the DT O
example NN O
which WDT O
is VBZ O
obvious JJ O
in IN O
retrospect NN O
is VBZ O
that IN O
the DT O
GPU NNP O
is VBZ O
itself PRP O
a DT O
finite JJ O
resource NN O
. . O

Moving VBG O
the DT O
rendering NN O
into IN O
a DT O
worker NN O
does VBZ O
allow VB O
the DT O
main JJ O
window NN O
to TO O
perform VB O
other JJ O
tasks NNS O
but CC O
at IN O
some DT O
point NN O
it PRP O
needs VBZ O
to TO O
use VB O
the DT O
GPU NNP O
to TO O
render VB B-KEYWORD
the DT O
DOM NNP O
and CC O
composite NN O
in IN O
the DT O
OffscreenCanvas NNP B-KEYWORD
. . O


If IN O
the DT O
worker NN B-KEYWORD
is VBZ O
consuming VBG O
all PDT O
the DT O
GPU NNP O
resources NNS O
then RB O
the DT O
main JJ O
window NN O
is VBZ O
going VBG O
to TO O
see VB O
a DT O
drop NN O
in IN O
performance NN O
no-matter NN O
where WRB O
the DT O
rendering VBG O
is VBZ O
performed VBN O
. . O

Notice NNP O
how WRB O
the DT O
timestamp NN O
update NN O
rate NN O
decreases NNS O
as IN O
the DT O
number NN O
of IN O
points NNS O
is VBZ O
increased VBN O
. . O

If IN O
you're NN O
lucky JJ O
enough RB O
to TO O
be VB O
sporting VBG O
a DT O
dedicated VBN O
GPU NNP O
you PRP O
may MD O
have VB O
to TO O
increase VB O
the DT O
point NN O
count NN O
in IN O
the DT O
query NN O
string NN O
beyond IN O
the DT O
readily RB O
clickable JJ O
values NNS O
. . O


An DT O
area NN O
we PRP O
haven't VBP O
explored VBN O
that WDT O
may MD O
offer VB O
further JJ O
performance NN O
improvements NNS O
is VBZ O
the DT O
murky JJ O
world NN O
of IN O
[context NN O
attributes](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext#Parameters JJ O
). NN O
This DT O
time NN O
around IN O
my PRP$ O
excuse NN O
is VBZ O
a DT O
lack NN O
of IN O
device NN O
support NN O
for IN O
these DT O
features NNS O
. . O


Most JJS O
relevant JJ O
to TO O
OffscreenCanvas NNP B-KEYWORD
rendering VBG B-KEYWORD
is VBZ O
the DT O
`desynchronized` NN O
attribute NN O
which WDT O
, , O
where WRB O
supported VBN O
and CC O
with IN O
restrictions NNS O
, , O
removes VBZ O
the DT O
synchronisation NN O
between IN O
the DT O
main JJ O
window NN O
and CC O
worker NN O
rendering VBG B-KEYWORD
minimising VBG O
the DT O
update NN O
lag NN O
. . O

This DT O
is VBZ O
covered VBN O
in IN O
more JJR O
detail NN O
in IN O
this DT O
[Google NNP O
Developers NNP O
post](https://developers.google.com/web/updates/2018/08/offscreen-canvas JJ O
). NN O


## NN O
Conclusion NNP O


OffscreenCanvas NNP B-KEYWORD
does VBZ O
provide VB O
a DT O
big JJ O
opportunity NN O
for IN O
improving VBG O
the DT O
rendering VBG B-KEYWORD
performance NN I-KEYWORD
of IN O
charts NNS O
but CC O
it PRP O
requires VBZ O
a DT O
considered VBN O
approach NN O
- - O


* NN O
Chart NNP B-KEYWORD
interactions NNS O
( ( O
e.g NN O
. . O
panning VBG O
, , O
zooming VBG O
, , O
highlighting VBG O
, , O
etc FW O
. . O
) ) O
are VBP O
more RBR O
complex JJ O
because IN O
of IN O
the DT O
main JJ O
window/worker NN O
boundary NN O
. . O

* NN O
* NN O
This DT O
can MD O
be VB O
mitigated VBN O
by IN O
ensuring VBG O
your PRP$ O
code NN O
has VBZ O
clear JJ O
separation NN O
of IN O
chart NN B-KEYWORD
rendering VBG I-KEYWORD
from IN O
event-handling JJ O
. . O

`postMessage` NN O
abstraction NN O
libraries NNS O
can MD O
also RB O
help VB O
to TO O
simplify VB O
the DT O
message-passing JJ O
. . O
* NN O

* NN O
Mixed-mode NNP O
component NN O
rendering VBG B-KEYWORD
approaches NNS O
( ( O
e.g NN O
. . O
SVG/HTML NNP O
overlays NNS O
) ) O
will MD O
also RB O
be VB O
more RBR O
complex JJ O
for IN O
the DT O
same JJ O
reasons NNS O
as IN O
above IN O
. . O

* NN O
* NN O
As RB O
well RB O
as IN O
the DT O
above JJ O
, , O
ensuring VBG O
that IN O
rendering VBG B-KEYWORD
is VBZ O
split VBN O
into IN O
media-specific NN O
components NNS O
and CC O
that DT O
each DT O
component NN O
is VBZ O
a DT O
pure JJ O
projection NN O
of IN O
a DT O
common JJ O
data NNS O
structure NN O
can MD O
also RB O
simplify VB O
the DT O
message-passing JJ O
. . O
* NN O

* NN O
GPU-constrained JJ O
rendering NN O
will MD O
be VB O
GPU NNP O
constrained VBD O
no-matter RB O
whether IN O
it PRP O
is VBZ O
running VBG O
on IN O
the DT O
main JJ O
window NN O
or CC O
in IN O
a DT O
worker NN O
! . O

* NN O
* NN O
Ensure NNP O
the DT O
main JJ O
window NN O
has VBZ O
enough JJ O
GPU NNP O
resources NNS O
available JJ O
to TO O
it PRP O
for IN O
painting/compositing VBG O
the DT O
rest NN O
of IN O
the DT O
document NN O
, , O
otherwise RB O
your PRP$ O
worker NN O
can MD O
still RB O
adversely RB O
impact VB O
main JJ O
window NN O
performance NN O
. . O
* NN O


[View NNP O
the DT O
demo](https://chrisprice.io/offscreen-canvas/?100000 JJ O
) ) O
and CC O
the DT O
[source NN O
on IN O
GitHub](https://github.com/chrisprice/offscreen-canvas/ NNP O
). NN O

